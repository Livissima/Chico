from typing import Literal
from selenium.webdriver import Chrome
# from app.auto import Propriedades
from app.auto.functions.navega√ß√£oweb_.navega√ß√£owebmobilidade import Navega√ß√£oWebMobilidade
from app.auto.functions.navega√ß√£oweb_.navega√ß√£owebscraping import Navega√ß√£oWebScraping
from app.auto.functions.navega√ß√£oweb_.navega√ß√£owebsiap import Navega√ß√£oWebSiap
from app.auto.functions.navega√ß√£oweb_.navega√ß√£owebsige import Navega√ß√£oWebSige
from app.auto.functions.navega√ß√£oweb_.tipagemnavega√ß√£o import TipagemNavega√ß√£o


class Navega√ß√£oWeb(TipagemNavega√ß√£o) :
    # Mova para atributo de CLASSE (n√£o property)
    _CONFIG_INST√ÇNCIAS = {
        'sige' : {
            'sige' : Navega√ß√£oWebSige, 'mobilidade' : Navega√ß√£oWebMobilidade, 'scraping' : Navega√ß√£oWebScraping
        }, 'siap' : {
            'siap' : Navega√ß√£oWebSiap, 'mobilidade' : Navega√ß√£oWebMobilidade, 'scraping' : Navega√ß√£oWebScraping
        }, 'google' : {
            'mobilidade' : Navega√ß√£oWebMobilidade, 'scraping' : Navega√ß√£oWebScraping
        }, 'netescola' : {
            'mobilidade' : Navega√ß√£oWebMobilidade, 'scraping' : Navega√ß√£oWebScraping
        }
    }

    def __init__(self, master: Chrome, site: Literal['sige', 'siap', 'google', 'netescola'] | str) :
        self.master = master
        # self._pp = Propriedades(site)  # ‚ö†Ô∏è IMPORTANTE: Esta linha estava faltando!
        self._m√≥dulos = {}

        # Use o atributo de classe diretamente
        config = self._CONFIG_INST√ÇNCIAS.get(site.lower(), {})

        print(f"üîß Configurando navega√ß√£o para: {site}")
        print(f"üì¶ M√≥dulos a carregar: {list(config.keys())}")

        for nome_m√≥dulo, classe in config.items() :
            try :
                if classe in [Navega√ß√£oWebMobilidade, Navega√ß√£oWebScraping] :
                    self._m√≥dulos[nome_m√≥dulo] = classe(master, site)
                else :
                    self._m√≥dulos[nome_m√≥dulo] = classe(master)
                print(f"‚úÖ M√≥dulo '{nome_m√≥dulo}' carregado: {self._m√≥dulos[nome_m√≥dulo]}")
            except Exception as e :
                print(f"‚ùå Erro ao carregar m√≥dulo '{nome_m√≥dulo}': {e}")

        # Debug: verificar m√©todos dispon√≠veis
        self._verificar_m√©todos()

    def _verificar_m√©todos(self) :
        """M√©todo de debug para verificar quais m√©todos est√£o dispon√≠veis"""
        print("=== üîç M√âTODOS DISPON√çVEIS ===")
        for nome_m√≥dulo, m√≥dulo in self._m√≥dulos.items() :
            m√©todos = [m for m in dir(m√≥dulo) if not m.startswith('_') and callable(getattr(m√≥dulo, m))]
            print(f"üì¶ {nome_m√≥dulo}: {m√©todos}")
        print("===============================")

    def __getattr__(self, item) :
        print(f"üîç Buscando m√©todo: {item}")

        for nome_m√≥dulo, m√≥dulo in self._m√≥dulos.items() :
            if hasattr(m√≥dulo, item) :
                m√©todo = getattr(m√≥dulo, item)
                print(f"‚úÖ M√©todo '{item}' encontrado em '{nome_m√≥dulo}', tipo: {type(m√©todo)}")

                # Verifique se √© callable
                if callable(m√©todo) :
                    print(f"üìû M√©todo '{item}' √© callable")
                else :
                    print(f"‚ö†Ô∏è M√©todo '{item}' N√ÉO √© callable")

                return m√©todo

        raise AttributeError(f"'{self.__class__.__name__}' n√£o possui o atributo '{item}'")

    # REMOVA a property _config_inst√¢ncias - isso est√° causando confus√£o

